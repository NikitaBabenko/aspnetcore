@page "/fetchdata"
@using Wasm.Authentication.Shared
@attribute [Authorize(Roles = "Wasm.Authentication.ServerAPI")]
@inject IAccessTokenProvider AuthenticationService
@inject NavigationManager Navigation

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(Navigation.BaseUri);

        var tokenResult = await AuthenticationService.GetAccessToken();

        switch (tokenResult.Status)
        {
            case AccessTokenResultStatus.Success:
                httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {tokenResult.Token.Value}");
                forecasts = await httpClient.GetJsonAsync<WeatherForecast[]>("WeatherForecast");

                break;
            case AccessTokenResultStatus.RequiresRedirect:
                Navigation.NavigateTo(tokenResult.RedirectUrl);
                break;
            default:
                break;
        }
    }
}
